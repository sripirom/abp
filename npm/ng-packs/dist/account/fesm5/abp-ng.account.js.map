{"version":3,"file":"abp-ng.account.js","sources":["ng://@abp/ng.account/lib/components/login/login.component.ts","ng://@abp/ng.account/lib/components/manage-profile/manage-profile.component.ts","ng://@abp/ng.account/lib/services/account.service.ts","ng://@abp/ng.account/lib/components/register/register.component.ts","ng://@abp/ng.account/lib/account-routing.module.ts","ng://@abp/ng.account/lib/components/change-password/change-password.component.ts","ng://@abp/ng.account/lib/components/personal-settings/personal-settings.component.ts","ng://@abp/ng.account/lib/components/tenant-box/tenant-box.component.ts","ng://@abp/ng.account/lib/tokens/options.token.ts","ng://@abp/ng.account/lib/account.module.ts","ng://@abp/ng.account/lib/constants/routes.ts","ng://@abp/ng.account/lib/models/options.ts","ng://@abp/ng.account/lib/models/user.ts","ng://@abp/ng.account/lib/models/tenant.ts"],"sourcesContent":["import { GetAppConfiguration, ConfigState } from '@abp/ng.core';\r\nimport { Component, Inject, Optional } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { from, throwError } from 'rxjs';\r\nimport { Options } from '../../models/options';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { catchError, finalize, switchMap, tap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\n\r\nconst { maxLength, minLength, required } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    @Optional() @Inject('ACCOUNT_OPTIONS') private options: Options,\r\n  ) {\r\n    this.oauthService.configure(this.store.selectSnapshot(ConfigState.getOne('environment')).oAuthConfig);\r\n    this.oauthService.loadDiscoveryDocument();\r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, maxLength(32)]],\r\n      remember: [false],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n    // this.oauthService.setStorage(this.form.value.remember ? localStorage : sessionStorage);\r\n\r\n    this.inProgress = true;\r\n    from(\r\n      this.oauthService.fetchTokenUsingPasswordFlow(this.form.get('username').value, this.form.get('password').value),\r\n    )\r\n      .pipe(\r\n        switchMap(() => this.store.dispatch(new GetAppConfiguration())),\r\n        tap(() => {\r\n          const redirectUrl = snq(() => window.history.state).redirectUrl || (this.options || {}).redirectUrl || '/';\r\n          this.store.dispatch(new Navigate([redirectUrl]));\r\n        }),\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { fadeIn } from '@abp/ng.theme.shared';\r\nimport { transition, trigger, useAnimation } from '@angular/animations';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'abp-manage-profile',\r\n  templateUrl: './manage-profile.component.html',\r\n  animations: [trigger('fadeIn', [transition(':enter', useAnimation(fadeIn))])],\r\n})\r\nexport class ManageProfileComponent {\r\n  selectedTab = 0;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { RegisterResponse, RegisterRequest, TenantIdResponse } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccountService {\r\n  constructor(private rest: RestService) {}\r\n\r\n  findTenant(tenantName: string): Observable<TenantIdResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/abp/multi-tenancy/tenants/by-name/${tenantName}`,\r\n    };\r\n\r\n    return this.rest.request<null, TenantIdResponse>(request);\r\n  }\r\n\r\n  register(body: RegisterRequest): Observable<RegisterResponse> {\r\n    const request: Rest.Request<RegisterRequest> = {\r\n      method: 'POST',\r\n      url: '/api/account/register',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<RegisterRequest, RegisterResponse>(request, { skipHandleError: true });\r\n  }\r\n}\r\n","import { ConfigState, GetAppConfiguration } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Store } from '@ngxs/store';\r\nimport { OAuthService } from 'angular-oauth2-oidc';\r\nimport { from, throwError } from 'rxjs';\r\nimport { catchError, finalize, switchMap, take, tap } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { RegisterRequest } from '../../models';\r\nimport { AccountService } from '../../services/account.service';\r\nconst { maxLength, minLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent {\r\n  form: FormGroup;\r\n\r\n  inProgress: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private accountService: AccountService,\r\n    private oauthService: OAuthService,\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n  ) {\r\n    this.oauthService.configure(this.store.selectSnapshot(ConfigState.getOne('environment')).oAuthConfig);\r\n    this.oauthService.loadDiscoveryDocument();\r\n\r\n    this.form = this.fb.group({\r\n      username: ['', [required, maxLength(255)]],\r\n      password: ['', [required, maxLength(32)]],\r\n      email: ['', [required, email]],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.inProgress = true;\r\n\r\n    const newUser = {\r\n      userName: this.form.get('username').value,\r\n      password: this.form.get('password').value,\r\n      emailAddress: this.form.get('email').value,\r\n      appName: 'Angular',\r\n    } as RegisterRequest;\r\n\r\n    this.accountService\r\n      .register(newUser)\r\n      .pipe(\r\n        switchMap(() => from(this.oauthService.fetchTokenUsingPasswordFlow(newUser.userName, newUser.password))),\r\n        switchMap(() => this.store.dispatch(new GetAppConfiguration())),\r\n        tap(() => this.store.dispatch(new Navigate(['/']))),\r\n        take(1),\r\n        catchError(err => {\r\n          this.toasterService.error(\r\n            snq(() => err.error.error_description) ||\r\n              snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'),\r\n            'Error',\r\n            { life: 7000 },\r\n          );\r\n          return throwError(err);\r\n        }),\r\n        finalize(() => (this.inProgress = false)),\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n","import { DynamicLayoutComponent } from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', pathMatch: 'full', redirectTo: 'login' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    children: [\r\n      { path: 'login', component: LoginComponent },\r\n      { path: 'register', component: RegisterComponent },\r\n      {\r\n        path: 'manage-profile',\r\n        component: ManageProfileComponent,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountRoutingModule {}\r\n","import { ChangePassword } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { comparePasswords, Validation } from '@ngx-validate/core';\r\nimport { Store } from '@ngxs/store';\r\nimport snq from 'snq';\r\n\r\nconst { minLength, required } = Validators;\r\n\r\nconst PASSWORD_FIELDS = ['newPassword', 'repeatNewPassword'];\r\n\r\n@Component({\r\n  selector: 'abp-change-password-form',\r\n  templateUrl: './change-password.component.html',\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  form: FormGroup;\r\n\r\n  mapErrorsFn: Validation.MapErrorsFn = (errors, groupErrors, control) => {\r\n    if (PASSWORD_FIELDS.indexOf(control.name) < 0) return errors;\r\n\r\n    return errors.concat(groupErrors.filter(({ key }) => key === 'passwordMismatch'));\r\n  }\r\n\r\n  constructor(private fb: FormBuilder, private store: Store, private toasterService: ToasterService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.fb.group(\r\n      {\r\n        password: ['', required],\r\n        newPassword: ['', required],\r\n        repeatNewPassword: ['', required],\r\n      },\r\n      {\r\n        validators: [comparePasswords(PASSWORD_FIELDS)],\r\n      },\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.store\r\n      .dispatch(\r\n        new ChangePassword({\r\n          currentPassword: this.form.get('password').value,\r\n          newPassword: this.form.get('newPassword').value,\r\n        }),\r\n      )\r\n      .subscribe({\r\n        next: () => {\r\n          this.form.reset();\r\n          this.toasterService.success('AbpAccount::PasswordChangedMessage', 'Success', { life: 5000 });\r\n        },\r\n        error: err => {\r\n          this.toasterService.error(snq(() => err.error.error.message, 'AbpAccount::DefaultErrorMessage'), 'Error', {\r\n            life: 7000,\r\n          });\r\n        },\r\n      });\r\n  }\r\n}\r\n","import { GetProfile, Profile, ProfileState, UpdateProfile } from '@abp/ng.core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { take, withLatestFrom } from 'rxjs/operators';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\n\r\nconst { maxLength, required, email } = Validators;\r\n\r\n@Component({\r\n  selector: 'abp-personal-settings-form',\r\n  templateUrl: './personal-settings.component.html',\r\n})\r\nexport class PersonalSettingsComponent implements OnInit {\r\n  @Select(ProfileState.getProfile)\r\n  profile$: Observable<Profile.Response>;\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, private store: Store, private toasterService: ToasterService) {}\r\n\r\n  buildForm() {\r\n    this.store\r\n      .dispatch(new GetProfile())\r\n      .pipe(\r\n        withLatestFrom(this.profile$),\r\n        take(1),\r\n      )\r\n      .subscribe(([, profile]) => {\r\n        this.form = this.fb.group({\r\n          userName: [profile.userName, [required, maxLength(256)]],\r\n          email: [profile.email, [required, email, maxLength(256)]],\r\n          name: [profile.name || '', [maxLength(64)]],\r\n          surname: [profile.surname || '', [maxLength(64)]],\r\n          phoneNumber: [profile.phoneNumber || '', [maxLength(16)]],\r\n        });\r\n      });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) return;\r\n\r\n    this.store.dispatch(new UpdateProfile(this.form.value)).subscribe(() => {\r\n      this.toasterService.success('AbpAccount::PersonalSettingsSaved', 'Success', { life: 5000 });\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n}\r\n","import { ABP, SetTenant, SessionState } from '@abp/ng.core';\r\nimport { ToasterService } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { throwError } from 'rxjs';\r\nimport { catchError, take } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport { AccountService } from '../../services/account.service';\r\n\r\n@Component({\r\n  selector: 'abp-tenant-box',\r\n  templateUrl: './tenant-box.component.html'\r\n})\r\nexport class TenantBoxComponent implements OnInit {\r\n  constructor(\r\n    private store: Store,\r\n    private toasterService: ToasterService,\r\n    private accountService: AccountService\r\n  ) {}\r\n\r\n  tenant = {} as ABP.BasicItem;\r\n\r\n  tenantName: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  ngOnInit() {\r\n    this.tenant =\r\n      this.store.selectSnapshot(SessionState.getTenant) ||\r\n      ({} as ABP.BasicItem);\r\n    this.tenantName = this.tenant.name || '';\r\n  }\r\n\r\n  onSwitch() {\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  save() {\r\n    if (this.tenant.name) {\r\n      this.accountService\r\n        .findTenant(this.tenant.name)\r\n        .pipe(\r\n          take(1),\r\n          catchError(err => {\r\n            this.toasterService.error(\r\n              snq(\r\n                () => err.error.error_description,\r\n                'AbpUi::DefaultErrorMessage'\r\n              ),\r\n              'AbpUi::Error'\r\n            );\r\n            return throwError(err);\r\n          })\r\n        )\r\n        .subscribe(({ success, tenantId }) => {\r\n          if (success) {\r\n            this.tenant = {\r\n              id: tenantId,\r\n              name: this.tenant.name\r\n            };\r\n            this.tenantName = this.tenant.name;\r\n            this.isModalVisible = false;\r\n          } else {\r\n            this.toasterService.error(\r\n              'AbpUiMultiTenancy::GivenTenantIsNotAvailable',\r\n              'AbpUi::Error',\r\n              {\r\n                messageLocalizationParams: [this.tenant.name]\r\n              }\r\n            );\r\n            this.tenant = {} as ABP.BasicItem;\r\n          }\r\n          this.store.dispatch(new SetTenant(success ? this.tenant : null));\r\n        });\r\n    } else {\r\n      this.store.dispatch(new SetTenant(null));\r\n      this.tenantName = null;\r\n      this.isModalVisible = false;\r\n    }\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Options } from '../models/options';\r\n\r\nexport function optionsFactory(options: Options) {\r\n  return {\r\n    redirectUrl: '/',\r\n    ...options,\r\n  };\r\n}\r\n\r\nexport const ACCOUNT_OPTIONS = new InjectionToken('ACCOUNT_OPTIONS');\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule, Provider } from '@angular/core';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { TableModule } from 'primeng/table';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { ChangePasswordComponent } from './components/change-password/change-password.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ManageProfileComponent } from './components/manage-profile/manage-profile.component';\r\nimport { PersonalSettingsComponent } from './components/personal-settings/personal-settings.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { TenantBoxComponent } from './components/tenant-box/tenant-box.component';\r\nimport { Options } from './models/options';\r\nimport { ACCOUNT_OPTIONS, optionsFactory } from './tokens/options.token';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    TenantBoxComponent,\r\n    ChangePasswordComponent,\r\n    ManageProfileComponent,\r\n    PersonalSettingsComponent,\r\n  ],\r\n  imports: [CoreModule, AccountRoutingModule, ThemeSharedModule, TableModule, NgbDropdownModule, NgxValidateCoreModule],\r\n  exports: [],\r\n})\r\nexport class AccountModule {}\r\n\r\n/**\r\n *\r\n * @deprecated since version 0.9\r\n */\r\nexport function AccountProviders(options = {} as Options): Provider[] {\r\n  return [\r\n    { provide: ACCOUNT_OPTIONS, useValue: options },\r\n    {\r\n      provide: 'ACCOUNT_OPTIONS',\r\n      useFactory: optionsFactory,\r\n      deps: [ACCOUNT_OPTIONS],\r\n    },\r\n  ];\r\n}\r\n","import { ABP, eLayoutType } from '@abp/ng.core';\r\n\r\n/**\r\n *\r\n * @deprecated since version 0.9\r\n */\r\nexport const ACCOUNT_ROUTES = {\r\n  routes: [\r\n    {\r\n      name: 'Account',\r\n      path: 'account',\r\n      invisible: true,\r\n      layout: eLayoutType.application,\r\n      children: [{ path: 'login', name: 'Login', order: 1 }, { path: 'register', name: 'Register', order: 2 }],\r\n    },\r\n  ] as ABP.FullRoute[],\r\n};\r\n","export interface Options {\r\n  redirectUrl?: string;\r\n}\r\n","export interface RegisterRequest {\r\n  userName: string;\r\n  emailAddress: string;\r\n  password: string;\r\n  appName?: string;\r\n}\r\n\r\nexport interface RegisterResponse {\r\n  tenantId: string;\r\n  userName: string;\r\n  name: string;\r\n  surname: string;\r\n  email: string;\r\n  emailConfirmed: boolean;\r\n  phoneNumber: string;\r\n  phoneNumberConfirmed: boolean;\r\n  twoFactorEnabled: boolean;\r\n  lockoutEnabled: boolean;\r\n  lockoutEnd: string;\r\n  concurrencyStamp: string;\r\n  isDeleted: boolean;\r\n  deleterId: string;\r\n  deletionTime: string;\r\n  lastModificationTime: string;\r\n  lastModifierId: string;\r\n  creationTime: string;\r\n  creatorId: string;\r\n  id: string;\r\n}\r\n","export interface TenantIdResponse {\r\n  success: boolean;\r\n  tenantId: string;\r\n}\r\n"],"names":["maxLength","minLength","required","email","tslib_1.__decorate"],"mappings":"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"}