!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("primeng/table"),require("@angular/router"),require("@angular/forms"),require("@ngxs/router-plugin"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/animations")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","primeng/table","@angular/router","@angular/forms","@ngxs/router-plugin","@ngxs/store","angular-oauth2-oidc","rxjs","rxjs/operators","snq","@angular/animations"],e):e(((r=r||self).abp=r.abp||{},r.abp.ng=r.abp.ng||{},r.abp.ng.account={}),r.ng_core,r.ng_theme_shared,r.ng.core,r.ngBootstrap,r.core$1,r.table,r.ng.router,r.ng.forms,r.routerPlugin,r.store,r.angularOauth2Oidc,r.rxjs,r.rxjs.operators,r.snq,r.ng.animations)}(this,function(r,e,n,t,o,a,i,s,c,l,p,u,d,m,f,b){"use strict";f=f&&f.hasOwnProperty("default")?f.default:f;var g=function(){return(g=Object.assign||function(r){for(var e,n=1,t=arguments.length;n<t;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(r[o]=e[o]);return r}).apply(this,arguments)};function v(r,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(r,e)}function h(r,e){var n="function"==typeof Symbol&&r[Symbol.iterator];if(!n)return r;var t,o,a=n.call(r),i=[];try{for(;(void 0===e||e-- >0)&&!(t=a.next()).done;)i.push(t.value)}catch(r){o={error:r}}finally{try{t&&!t.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i}var y=c.Validators.maxLength,w=(c.Validators.minLength,c.Validators.required),S=function(){function r(r,n,t,o,a){this.fb=r,this.oauthService=n,this.store=t,this.toasterService=o,this.options=a,this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[w,y(255)]],password:["",[w,y(32)]],remember:[!1]})}return r.prototype.onSubmit=function(){var r=this;this.form.invalid||(this.inProgress=!0,d.from(this.oauthService.fetchTokenUsingPasswordFlow(this.form.get("username").value,this.form.get("password").value)).pipe(m.switchMap(function(){return r.store.dispatch(new e.GetAppConfiguration)}),m.tap(function(){var e=f(function(){return window.history.state}).redirectUrl||(r.options||{}).redirectUrl||"/";r.store.dispatch(new l.Navigate([e]))}),m.catchError(function(e){return r.toasterService.error(f(function(){return e.error.error_description})||f(function(){return e.error.error.message},"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(e)}),m.finalize(function(){return r.inProgress=!1})).subscribe())},r.decorators=[{type:t.Component,args:[{selector:"abp-login",template:'<div class="row">\r\n  <div class="col col-md-4 offset-md-4">\r\n    <abp-tenant-box></abp-tenant-box>\r\n\r\n    <div class="abp-account-container">\r\n      <h2>{{ \'AbpAccount::Login\' | abpLocalization }}</h2>\r\n      <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate>\r\n        <div class="form-group">\r\n          <label for="login-input-user-name-or-email-address">{{\r\n            \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\r\n          }}</label>\r\n          <input\r\n            class="form-control"\r\n            type="text"\r\n            id="login-input-user-name-or-email-address"\r\n            formControlName="username"\r\n            autofocus\r\n          />\r\n        </div>\r\n        <div class="form-group">\r\n          <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\r\n          <input class="form-control" type="password" id="login-input-password" formControlName="password" />\r\n        </div>\r\n        <div class="form-check" validationTarget validationStyle>\r\n          <label class="form-check-label" for="login-input-remember-me">\r\n            <input class="form-check-input" type="checkbox" id="login-input-remember-me" formControlName="remember" />\r\n            {{ \'AbpAccount::RememberMe\' | abpLocalization }}\r\n          </label>\r\n        </div>\r\n        <div class="mt-2">\r\n          <abp-button [loading]="inProgress" type="submit">\r\n            {{ \'AbpAccount::Login\' | abpLocalization }}\r\n          </abp-button>\r\n        </div>\r\n      </form>\r\n      <div style="padding-top: 20px">\r\n        <a routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:u.OAuthService},{type:p.Store},{type:n.ToasterService},{type:void 0,decorators:[{type:t.Optional},{type:t.Inject,args:["ACCOUNT_OPTIONS"]}]}]},r}();var A=function(){function r(){this.selectedTab=0}return r.decorators=[{type:t.Component,args:[{selector:"abp-manage-profile",template:'<div class="row entry-row">\r\n  <div class="col-auto"></div>\r\n  <div id="breadcrumb" class="col-md-auto pl-md-0"></div>\r\n  <div class="col"></div>\r\n</div>\r\n\r\n<div id="ManageProfileWrapper">\r\n  <div class="row">\r\n    <div class="col-3">\r\n      <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\r\n        <li class="nav-item pointer" (click)="selectedTab = 0">\r\n          <a class="nav-link" [ngClass]="{ active: selectedTab === 0 }" role="tab">{{\r\n            \'AbpUi::ChangePassword\' | abpLocalization\r\n          }}</a>\r\n        </li>\r\n        <li class="nav-item pointer" (click)="selectedTab = 1">\r\n          <a class="nav-link" [ngClass]="{ active: selectedTab === 1 }" role="tab">{{\r\n            \'AbpAccount::PersonalSettings\' | abpLocalization\r\n          }}</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div class="col-9">\r\n      <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\r\n        <div class="tab-pane active" role="tabpanel">\r\n          <abp-change-password-form></abp-change-password-form>\r\n        </div>\r\n      </div>\r\n      <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\r\n        <div class="tab-pane active" role="tabpanel">\r\n          <abp-personal-settings-form></abp-personal-settings-form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n',animations:[b.trigger("fadeIn",[b.transition(":enter",b.useAnimation(n.fadeIn))])]}]}],r}();var N=function(){function r(r){this.rest=r}return r.prototype.findTenant=function(r){var e={method:"GET",url:"/api/abp/multi-tenancy/tenants/by-name/"+r};return this.rest.request(e)},r.prototype.register=function(r){var e={method:"POST",url:"/api/account/register",body:r};return this.rest.request(e,{skipHandleError:!0})},r.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],r.ctorParameters=function(){return[{type:e.RestService}]},r.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new r(t.ɵɵinject(e.RestService))},token:r,providedIn:"root"}),r}();var C=c.Validators.maxLength,P=(c.Validators.minLength,c.Validators.required),T=c.Validators.email,L=function(){function r(r,n,t,o,a){this.fb=r,this.accountService=n,this.oauthService=t,this.store=o,this.toasterService=a,this.oauthService.configure(this.store.selectSnapshot(e.ConfigState.getOne("environment")).oAuthConfig),this.oauthService.loadDiscoveryDocument(),this.form=this.fb.group({username:["",[P,C(255)]],password:["",[P,C(32)]],email:["",[P,T]]})}return r.prototype.onSubmit=function(){var r=this;if(!this.form.invalid){this.inProgress=!0;var n={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"};this.accountService.register(n).pipe(m.switchMap(function(){return d.from(r.oauthService.fetchTokenUsingPasswordFlow(n.userName,n.password))}),m.switchMap(function(){return r.store.dispatch(new e.GetAppConfiguration)}),m.tap(function(){return r.store.dispatch(new l.Navigate(["/"]))}),m.take(1),m.catchError(function(e){return r.toasterService.error(f(function(){return e.error.error_description})||f(function(){return e.error.error.message},"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),d.throwError(e)}),m.finalize(function(){return r.inProgress=!1})).subscribe()}},r.decorators=[{type:t.Component,args:[{selector:"abp-register",template:'<div class="row">\r\n  <div class="col col-md-4 offset-md-4">\r\n    <abp-tenant-box></abp-tenant-box>\r\n\r\n    <div class="abp-account-container">\r\n      <h2>{{ \'AbpAccount::Register\' | abpLocalization }}</h2>\r\n      <form [formGroup]="form" (ngSubmit)="onSubmit()" novalidate>\r\n        <div class="form-group">\r\n          <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\r\n          ><span> * </span\r\n          ><input autofocus type="text" id="input-user-name" class="form-control" formControlName="username" />\r\n        </div>\r\n        <div class="form-group">\r\n          <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\r\n          ><span> * </span><input type="email" id="input-email-address" class="form-control" formControlName="email" />\r\n        </div>\r\n        <div class="form-group">\r\n          <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\r\n          ><span> * </span><input type="password" id="input-password" class="form-control" formControlName="password" />\r\n        </div>\r\n        <abp-button [loading]="inProgress" type="submit">\r\n          {{ \'AbpAccount::Register\' | abpLocalization }}\r\n        </abp-button>\r\n      </form>\r\n      <div style="padding-top: 20px">\r\n        <a routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:N},{type:u.OAuthService},{type:p.Store},{type:n.ToasterService}]},r}();var x=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:e.DynamicLayoutComponent,children:[{path:"login",component:S},{path:"register",component:L},{path:"manage-profile",component:A}]}],M=function(){function r(){}return r.decorators=[{type:t.NgModule,args:[{imports:[s.RouterModule.forChild(x)],exports:[s.RouterModule]}]}],r}(),O=(c.Validators.minLength,c.Validators.required),z=["newPassword","repeatNewPassword"],I=function(){function r(r,e,n){this.fb=r,this.store=e,this.toasterService=n,this.mapErrorsFn=function(r,e,n){return z.indexOf(n.name)<0?r:r.concat(e.filter(function(r){return"passwordMismatch"===r.key}))}}return r.prototype.ngOnInit=function(){this.form=this.fb.group({password:["",O],newPassword:["",O],repeatNewPassword:["",O]},{validators:[a.comparePasswords(z)]})},r.prototype.onSubmit=function(){var r=this;this.form.invalid||this.store.dispatch(new e.ChangePassword({currentPassword:this.form.get("password").value,newPassword:this.form.get("newPassword").value})).subscribe({next:function(){r.form.reset(),r.toasterService.success("AbpAccount::PasswordChangedMessage","Success",{life:5e3})},error:function(e){r.toasterService.error(f(function(){return e.error.error.message},"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3})}})},r.decorators=[{type:t.Component,args:[{selector:"abp-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn">\r\n  <div class="form-group">\r\n    <label for="current-password">{{ \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input type="password" id="current-password" class="form-control" formControlName="password" autofocus />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\r\n    ><span> * </span><input type="password" id="new-password" class="form-control" formControlName="newPassword" />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="confirm-new-password">{{ \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input type="password" id="confirm-new-password" class="form-control" formControlName="repeatNewPassword" />\r\n  </div>\r\n  <abp-button iconClass="fa fa-check" buttonClass="btn btn-primary color-white" buttonType="submit">{{\r\n    \'AbpIdentity::Save\' | abpLocalization\r\n  }}</abp-button>\r\n</form>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:p.Store},{type:n.ToasterService}]},r}();var k=c.Validators.maxLength,U=c.Validators.required,q=c.Validators.email,E=function(){function r(r,e,n){this.fb=r,this.store=e,this.toasterService=n}return r.prototype.buildForm=function(){var r=this;this.store.dispatch(new e.GetProfile).pipe(m.withLatestFrom(this.profile$),m.take(1)).subscribe(function(e){var n=h(e,2)[1];r.form=r.fb.group({userName:[n.userName,[U,k(256)]],email:[n.email,[U,q,k(256)]],name:[n.name||"",[k(64)]],surname:[n.surname||"",[k(64)]],phoneNumber:[n.phoneNumber||"",[k(16)]]})})},r.prototype.submit=function(){var r=this;this.form.invalid||this.store.dispatch(new e.UpdateProfile(this.form.value)).subscribe(function(){r.toasterService.success("AbpAccount::PersonalSettingsSaved","Success",{life:5e3})})},r.prototype.ngOnInit=function(){this.buildForm()},r.decorators=[{type:t.Component,args:[{selector:"abp-personal-settings-form",template:'<form novalidate *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\r\n  <div class="form-group">\r\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\r\n    ><span> * </span><input type="text" id="username" class="form-control" formControlName="userName" autofocus />\r\n  </div>\r\n  <div class="row">\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\r\n        ><input type="text" id="name" class="form-control" formControlName="name" />\r\n      </div>\r\n    </div>\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\r\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\r\n    ><span> * </span><input type="text" id="email-address" class="form-control" formControlName="email" />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\r\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\r\n  </div>\r\n  <abp-button buttonType="submit" iconClass="fa fa-check" buttonClass="btn btn-primary color-white">\r\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n'}]}],r.ctorParameters=function(){return[{type:c.FormBuilder},{type:p.Store},{type:n.ToasterService}]},function(r,e,n,t){var o,a=arguments.length,i=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(r,e,n,t);else for(var s=r.length-1;s>=0;s--)(o=r[s])&&(i=(a<3?o(i):a>3?o(e,n,i):o(e,n))||i);a>3&&i&&Object.defineProperty(e,n,i)}([p.Select(e.ProfileState.getProfile),v("design:type",d.Observable)],r.prototype,"profile$",void 0),r}();var j=function(){function r(r,e,n){this.store=r,this.toasterService=e,this.accountService=n,this.tenant={}}return r.prototype.ngOnInit=function(){this.tenant=this.store.selectSnapshot(e.SessionState.getTenant)||{},this.tenantName=this.tenant.name||""},r.prototype.onSwitch=function(){this.isModalVisible=!0},r.prototype.save=function(){var r=this;this.tenant.name?this.accountService.findTenant(this.tenant.name).pipe(m.take(1),m.catchError(function(e){return r.toasterService.error(f(function(){return e.error.error_description},"AbpUi::DefaultErrorMessage"),"AbpUi::Error"),d.throwError(e)})).subscribe(function(n){var t=n.success,o=n.tenantId;t?(r.tenant={id:o,name:r.tenant.name},r.tenantName=r.tenant.name,r.isModalVisible=!1):(r.toasterService.error("AbpUiMultiTenancy::GivenTenantIsNotAvailable","AbpUi::Error",{messageLocalizationParams:[r.tenant.name]}),r.tenant={}),r.store.dispatch(new e.SetTenant(t?r.tenant:null))}):(this.store.dispatch(new e.SetTenant(null)),this.tenantName=null,this.isModalVisible=!1)},r.decorators=[{type:t.Component,args:[{selector:"abp-tenant-box",template:'<div\r\n  class="tenant-switch-box"\r\n  style="background-color: #eee; margin-bottom: 20px; color: #000; padding: 10px; text-align: center;"\r\n>\r\n  <span style="color: #666;">{{ \'AbpUiMultiTenancy::Tenant\' | abpLocalization }}: </span>\r\n  <strong>\r\n    <i>{{ tenantName || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}</i>\r\n  </strong>\r\n  (<a id="abp-tenant-switch-link" style="color: #333; cursor: pointer" (click)="onSwitch()">{{\r\n    \'AbpUiMultiTenancy::Switch\' | abpLocalization\r\n  }}</a\r\n  >)\r\n</div>\r\n\r\n<abp-modal [(visible)]="isModalVisible" size="md">\r\n  <ng-template #abpHeader>\r\n    <h5>Switch Tenant</h5>\r\n  </ng-template>\r\n  <ng-template #abpBody>\r\n    <form (ngSubmit)="save()">\r\n      <div class="mt-2">\r\n        <div class="form-group">\r\n          <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\r\n          <input [(ngModel)]="tenant.name" type="text" id="name" name="tenant" class="form-control" autofocus />\r\n        </div>\r\n        <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n  <ng-template #abpFooter>\r\n    <button #abpClose type="button" class="btn btn-secondary">\r\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <button type="button" class="btn btn-primary" (click)="save()">\r\n      <i class="fa fa-check mr-1"></i> <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\r\n    </button>\r\n  </ng-template>\r\n</abp-modal>\r\n'}]}],r.ctorParameters=function(){return[{type:p.Store},{type:n.ToasterService},{type:N}]},r}();function D(r){return g({redirectUrl:"/"},r)}var V=new t.InjectionToken("ACCOUNT_OPTIONS"),R=function(){function r(){}return r.decorators=[{type:t.NgModule,args:[{declarations:[S,L,j,I,A,E],imports:[e.CoreModule,M,n.ThemeSharedModule,i.TableModule,o.NgbDropdownModule,a.NgxValidateCoreModule],exports:[]}]}],r}();r.ACCOUNT_OPTIONS=V,r.ACCOUNT_ROUTES={routes:[{name:"Account",path:"account",invisible:!0,layout:"application",children:[{path:"login",name:"Login",order:1},{path:"register",name:"Register",order:2}]}]},r.AccountModule=R,r.AccountProviders=function(r){return void 0===r&&(r={}),[{provide:V,useValue:r},{provide:"ACCOUNT_OPTIONS",useFactory:D,deps:[V]}]},r.ChangePasswordComponent=I,r.LoginComponent=S,r.ManageProfileComponent=A,r.PersonalSettingsComponent=E,r.RegisterComponent=L,r.optionsFactory=D,r.ɵa=S,r.ɵc=L,r.ɵd=N,r.ɵe=j,r.ɵf=I,r.ɵg=A,r.ɵh=E,r.ɵi=M,r.ɵj=D,r.ɵk=V,Object.defineProperty(r,"__esModule",{value:!0})});
//# sourceMappingURL=abp-ng.account.umd.min.js.map